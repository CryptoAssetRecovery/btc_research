# Docker Compose for Production Environment
# Usage: docker-compose -f docker-compose.prod.yml up -d
version: '3.8'

# Production-specific configurations
x-app-production: &app-production
  build:
    context: .
    target: production
  environment:
    - REDIS_URL=redis://redis-prod:6379/0
    - DATABASE_URL=postgresql://trader:${POSTGRES_PASSWORD:-secure_production_password}@postgres-prod:5432/paper_trading
    - ENVIRONMENT=production
    - LOG_LEVEL=INFO
    - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
    - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-jwt-secret-here}
  volumes:
    - ./btc_research/config:/app/config:ro
    - production_data:/app/data
    - production_logs:/app/logs
  restart: always
  networks:
    - btc-prod-network
  logging:
    driver: "json-file"
    options:
      max-size: "10m"
      max-file: "3"

services:
  # Production paper trading engine with high availability
  paper-trader-prod:
    <<: *app-production
    container_name: btc-paper-trader-prod
    command: ["python", "-m", "btc_research.live.strategy_runner", "--config", "config/volume-profile-breakout.yaml"]
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.5'
          memory: 2G
      restart_policy:
        condition: any
        delay: 10s
        max_attempts: 5
        window: 120s
    healthcheck:
      test: ["CMD-SHELL", "python -c 'import redis; redis.Redis(host=\"redis-prod\").ping()' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    depends_on:
      redis-prod:
        condition: service_healthy
      postgres-prod:
        condition: service_healthy

  # Production API server with load balancing support
  api-server-prod:
    <<: *app-production
    container_name: btc-api-server-prod
    command: ["gunicorn", "btc_research.api.main:app", "-w", "4", "-k", "uvicorn.workers.UvicornWorker", "--bind", "0.0.0.0:8000", "--timeout", "60", "--keepalive", "5"]
    ports:
      - "8000:8000"
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 5
        window: 60s
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      redis-prod:
        condition: service_healthy
      postgres-prod:
        condition: service_healthy
      paper-trader-prod:
        condition: service_healthy

  # Production dashboard
  dashboard-prod:
    <<: *app-production
    container_name: btc-dashboard-prod
    command: ["gunicorn", "btc_research.web.app:app", "-w", "2", "--bind", "0.0.0.0:5000", "--timeout", "30"]
    ports:
      - "5000:5000"
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 60s
    depends_on:
      - api-server-prod

  # Production Redis with persistence and security
  redis-prod:
    image: redis:7-alpine
    container_name: btc-redis-prod
    ports:
      - "127.0.0.1:6379:6379"  # Bind to localhost only
    volumes:
      - redis_prod_data:/data
      - ./config/redis-prod.conf:/usr/local/etc/redis/redis.conf:ro
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis_production_password}
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 60s
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-redis_production_password}", "ping"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: always
    networks:
      - btc-prod-network

  # Production PostgreSQL with high availability
  postgres-prod:
    image: postgres:15-alpine
    container_name: btc-postgres-prod
    environment:
      - POSTGRES_DB=paper_trading
      - POSTGRES_USER=trader
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-secure_production_password}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
      - PGDATA=/var/lib/postgresql/data/pgdata
    ports:
      - "127.0.0.1:5432:5432"  # Bind to localhost only
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./sql/init-prod.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./backups:/backups
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
      restart_policy:
        condition: any
        delay: 10s
        max_attempts: 3
        window: 120s
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trader -d paper_trading"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: always
    networks:
      - btc-prod-network

  # NGINX reverse proxy for production
  nginx-prod:
    image: nginx:alpine
    container_name: btc-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx-prod.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    depends_on:
      - api-server-prod
      - dashboard-prod
    restart: always
    networks:
      - btc-prod-network
    profiles:
      - nginx

  # Production monitoring with Prometheus
  prometheus-prod:
    image: prom/prometheus:latest
    container_name: btc-prometheus-prod
    ports:
      - "127.0.0.1:9090:9090"
    volumes:
      - ./monitoring/prometheus-prod.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_prod_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    restart: always
    networks:
      - btc-prod-network
    profiles:
      - monitoring

  # Grafana for visualization
  grafana-prod:
    image: grafana/grafana:latest
    container_name: btc-grafana-prod
    ports:
      - "127.0.0.1:3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin_password}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=localhost
      - GF_SMTP_ENABLED=false
    volumes:
      - grafana_prod_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    depends_on:
      - prometheus-prod
    restart: always
    networks:
      - btc-prod-network
    profiles:
      - monitoring

  # Backup service for data protection
  backup-service:
    image: postgres:15-alpine
    container_name: btc-backup-service
    environment:
      - PGPASSWORD=${POSTGRES_PASSWORD:-secure_production_password}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    command: ["/backup.sh"]
    depends_on:
      - postgres-prod
    restart: "no"
    networks:
      - btc-prod-network
    profiles:
      - backup

# Production volumes with external drivers for persistence
volumes:
  production_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/btc-research/data
  production_logs:
    driver: local
    driver_opts:
      type: none
      o: bind  
      device: /var/log/btc-research
  redis_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/btc-research/redis
  postgres_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/btc-research/postgres
  prometheus_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/btc-research/prometheus
  grafana_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/btc-research/grafana
  nginx_logs:
    driver: local

# Production network with security
networks:
  btc-prod-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.22.0.0/16
    driver_opts:
      com.docker.network.bridge.name: btc-prod-br
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"